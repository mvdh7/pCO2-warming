from sys import path

pyco2path = "/Users/matthew/github/PyCO2SYS"
if pyco2path not in path:
    path.append(pyco2path)

import PyCO2SYS as pyco2
from itertools import cycle
from matplotlib import pyplot as plt
import xarray as xr
import numpy as np
import pwtools

use_quickload = True
opt_total_borate = 1

if not use_quickload:
    # Import OceanSODA --- monthly averages (generated by si_predict_bh.py)
    soda_monthly = xr.open_dataset("quickload/soda_monthly.zarr", engine="zarr")

    # Calculate dlnfCO2_dT field and its components
    grads = [
        "k_carbonic_1",
        "k_carbonic_2",
    ]
    grads_10 = [
        "k_CO2",
        "k_carbonic_1",
        "k_carbonic_2",
        "k_borate",
        "k_water",
    ]
    for opt_k_carbonic in range(1, 19):
        okc = opt_k_carbonic
        print(opt_k_carbonic, "/ 18")
        if opt_k_carbonic == 10:
            grads_here = grads_10
        else:
            grads_here = grads
        results = pyco2.sys(
            par1=soda_monthly.talk.data,
            par2=soda_monthly.dic.data,
            par1_type=1,
            par2_type=2,
            temperature=soda_monthly.temperature.data,
            salinity=soda_monthly.salinity.data,
            opt_k_carbonic=opt_k_carbonic,
            opt_total_borate=opt_total_borate,
            grads_of=["fCO2", *grads_here],
            grads_wrt=["temperature", *grads_here],
        )
        # Get total upsilon with autograd (_ag)
        soda_monthly["ups_{:02.0f}_ag".format(okc)] = (
            ("month", "lat", "lon"),
            1e3 * results["dlnfCO2_dT"],
        )
        # Get total upsilon with final differences (_fd)
        soda_monthly["ups_{:02.0f}_fd".format(okc)] = (
            ("month", "lat", "lon"),
            (1e3 * results["d_fCO2__d_temperature"] / results["fCO2"]),
        )
        # Get components
        for k in grads_here:
            soda_monthly["ups_{:02.0f}_{}".format(okc, k[2:])] = (
                ("month", "lat", "lon"),
                (
                    1e3
                    * results["d_" + k + "__d_temperature"]
                    * results["d_fCO2__d_" + k]
                )
                / results["fCO2"],
            )

    # Save to file
    soda_monthly.to_zarr("quickload/soda_monthly_figure6.zarr")

else:
    soda_monthly = xr.open_dataset("quickload/soda_monthly_figure6.zarr", engine="zarr")

# %% Visualise - violins
colours = cycle(
    ["xkcd:sea blue", "xkcd:grey green", "xkcd:light orange", "xkcd:dusty rose"]
)
fig, ax = plt.subplots(dpi=300, figsize=(17.4 / 2.54, 11 / 2.54))
fvars = ["CO2", "borate", "water"]
widths = 0.85
for i, k in enumerate(fvars):
    fvar = soda_monthly["ups_10_{}".format(k)].to_numpy()
    parts = ax.violinplot(
        fvar[~np.isnan(fvar)],
        [i],
        showextrema=False,
        points=100,
        widths=widths,
    )
    parts["bodies"][0].set_facecolor("xkcd:dark")
    parts["bodies"][0].set_alpha(0.8)
okc_order = [6, 7, 4, 10, 11, 13, 14, 15, 17, 9, 16, 18, 12, 1, 2, 3, 5, 8]
assert len(set(okc_order)) == 18
assert np.all(np.isin(okc_order, range(1, 19)))
for x, o in enumerate(okc_order):
    xpos = i + x + 1
    ax.text(
        xpos,
        65,
        pwtools.okc_codes[o],
        ha="center",
        va="bottom",
        rotation=90,
        fontsize=8.5,
    )
    c = next(colours)
    fvar = soda_monthly["ups_{:02.0f}_carbonic_1".format(o)].to_numpy()
    parts = ax.violinplot(
        fvar[~np.isnan(fvar)],
        [xpos],
        showextrema=False,
        points=100,
        widths=widths,
    )
    parts["bodies"][0].set_facecolor(c)
    parts["bodies"][0].set_alpha(0.6)
    fvar = soda_monthly["ups_{:02.0f}_carbonic_2".format(o)].to_numpy()
    parts = ax.violinplot(
        fvar[~np.isnan(fvar)],
        [i + x + 1],
        showextrema=False,
        points=100,
        widths=widths,
    )
    parts["bodies"][0].set_facecolor(c)
    parts["bodies"][0].set_alpha(0.4)
    fvar = soda_monthly["ups_{:02.0f}_ag".format(o)].to_numpy()
    parts = ax.violinplot(
        fvar[~np.isnan(fvar)],
        [i + x + 1],
        showextrema=False,
        points=100,
        widths=widths,
    )
    parts["bodies"][0].set_facecolor(c)
    parts["bodies"][0].set_alpha(0.8)
ax.plot([2.4, 20.6], [42.3, 42.3], c="xkcd:dark", alpha=0.8, ls=":", lw=1.5)
ax.grid(alpha=0.3, axis="y")
ax.grid(alpha=0.05, axis="x")
ax.set_xlim((-1, 21))
ax.axhline(0, c="k", lw=0.8)
ax.set_yticks(np.arange(-60, 70, 15))
ax.set_ylim([-45, 60])
ax.set_xticks(np.arange(0, 21))
ax.text(2.45, 39.5, "Total →", va="center", ha="right", fontsize=9)
ax.text(2.45, -22, "$K_1^*$ →", va="center", ha="right", fontsize=9)
ax.text(2.45, 23.5, "$K_2^*$ →", va="center", ha="right", fontsize=9)
fxlabels = [r"$K_0′$", r"$K_\mathrm{B}^*$", "$K_w^*$"]
for i, fxl in enumerate(fxlabels):
    ax.text(i, 64, fxl, ha="center", va="bottom")
for o in okc_order:
    fxlabels.append(str(o))
ax.set_xticklabels(fxlabels)
ax.set_ylabel("Contribution to $υ$ / k°C$^{–1}$")
ax.tick_params(top=True, labeltop=False)
brackets = dict(
    xycoords="data",
    textcoords="data",
    arrowprops=dict(
        arrowstyle="-",
        connectionstyle="arc, armA=15, armB=15, angleA=-90, angleB=-90, rad=35",
        ec="xkcd:grey blue",
    ),
    annotation_clip=False,
)
anx = -60
ax.annotate("", xy=(5, anx), xytext=(12, anx), **brackets)
ax.text(8.5, anx - 6, '"Mehrbach"', ha="center", va="top", c="xkcd:grey blue")
ax.annotate("", xy=(3, anx), xytext=(4, anx), **brackets)
ax.text(3.5, anx - 6, "GEOSECS", ha="center", va="top", c="xkcd:grey blue")
ax.annotate("", xy=(16, anx), xytext=(19, anx), **brackets)
ax.text(17.5, anx - 6, "Synthetic", ha="center", va="top", c="xkcd:grey blue")
fig.tight_layout()
fig.savefig("figures_final/figure6.png")
